WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }

// Basic tokens

letter_or_underscore          = { ASCII_ALPHA | "_" }
letter_or_digit_or_underscore = { ASCII_ALPHANUMERIC | "_" }

identifier      = @{ letter_or_underscore ~ letter_or_digit_or_underscore* }
integer_literal = @{ ASCII_DIGIT+ }
float_literal   = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
string_literal  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
bool_literal    = @{ "true" | "false" }
// Add Boolean literal

type_name = { "int" | "float" | "string" | "bool" }
// Add bool type
ret_type        = { type_name | "void" }
global_keyword  = { "global" }
primary_keyword = { "primary" }

// Grammar Start

program = {
    SOI ~ nodes_block ~ table_declaration* ~ function_declaration* ~ EOI
}

// Nodes Block

nodes_block = {
    "nodes" ~ "{" ~ node_list ~ "}"
}

node_list = {
    identifier ~ ("," ~ identifier)*
}

// Table Declarations

table_declaration = {
    "table" ~ identifier ~ "on" ~ identifier ~ "{" ~ field_declaration* ~ "}"
}

field_declaration = {
    primary_keyword? ~ type_name ~ identifier ~ ";"
}

// Function Declarations

function_declaration = {
    ret_type ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ "{" ~ function_body_item* ~ "}"
}

parameter_list = {
    parameter_decl ~ ("," ~ parameter_decl)*
}

parameter_decl = {
    type_name ~ identifier
}

function_body_item = {
    hop_block
}

// Hop Blocks

hop_block = {
    "hop" ~ "on" ~ identifier ~ block
}

// Statements

statement = {
    var_decl_statement
  | var_assignment_statement
  | assignment_statement
  | if_statement
  | while_statement
  | return_statement
  | abort_statement
  | break_statement
  | continue_statement
  | empty_statement
}

var_assignment_statement = {
    identifier ~ "=" ~ expression ~ ";"
}

assignment_statement = {
    identifier ~ "[" ~ identifier ~ ":" ~ expression ~ "]" ~ "." ~ identifier ~ "=" ~ expression ~ ";"
}

var_decl_statement = {
    global_keyword? ~ type_name ~ identifier ~ "=" ~ expression ~ ";"
}

return_statement = {
    "return" ~ expression? ~ ";"
}

abort_statement = {
    "abort" ~ ";"
}

break_statement = {
    "break" ~ ";"
}

continue_statement = {
    "continue" ~ ";"
}

if_statement = {
    "if" ~ "(" ~ expression ~ ")" ~ block ~ ("else" ~ block)?
}

while_statement = {
    "while" ~ "(" ~ expression ~ ")" ~ block
}

block = {
    "{" ~ statement* ~ "}"
}

empty_statement = { ";" }

// Expressions (operator precedence)

expression = { logic_or }

logic_or = {
    logic_and ~ (logic_or_op ~ logic_and)*
}

logic_or_op = { "||" }

logic_and = {
    equality ~ (logic_and_op ~ equality)*
}

logic_and_op = { "&&" }

equality = {
    comparison ~ (equality_op ~ comparison)*
}

equality_op = { "==" | "!=" }

comparison = {
    addition ~ (comparison_op ~ addition)*
}

comparison_op = { "<=" | ">=" | "<" | ">" }

addition = {
    multiplication ~ (addition_op ~ multiplication)*
}

addition_op = { "+" | "-" }

multiplication = {
    unary ~ (multiplication_op ~ unary)*
}

multiplication_op = { "*" | "/" }

unary = {
    primary
  | (unary_op ~ unary)
}

unary_op = { "!" | "-" }

primary = {
    bool_literal
  | table_field_access
  | float_literal
  | integer_literal
  | string_literal
  | identifier
  | "(" ~ expression ~ ")"
}

table_field_access = {
    identifier ~ "[" ~ identifier ~ ":" ~ expression ~ "]" ~ "." ~ identifier
}

// We skip whitespace and single-line comments globally:
_WHITESPACE_SL_COMMENT = _{ WHITESPACE | COMMENT }
